1 - Angular tutorials - Components
    
    1.1 - Template - Conatains html part means handles view ( user interface ). 
    1.2 - Class    - Can be use to defines our logics using methods like onclick - to hide or show                     data.
    1.3 - Metadata - It defines that class is just a regular class or component class which is used                    to define logics. It defines using decorator in type script. Decorator is                         nothing it is just the function which defines the class.
    1.4 - Template, class and Metadata - All are combined using component decorator ('@'). which will       bind with the export class.
    1.5 - Example  - By default welcome to {{ title }} Comes. Here "title" is called the property which is defined in export class. Which will be rundered in View file (Temoplate).
    1.6 - whenever we creats the component you will see in the terminal that some files will be created and One file module.ts is updated. If you open that you will see the import command has been automatically added in the file and you will see the component will be added in our @ngmodule array.
    1.7 - If we want to use the component inside another html. You just need to runder the selector. You component will automatically linked with it.

2 - Interpolation In Angular
    
    2.1 - Meaning = the insertion of something of a different nature into something else.
    2.2 - If anything you wants dynamic in view file instead of static. You can define the property inside export class in "component.ts" file. And can be runder in html file using {{ property }}. 
    2.3 - What we can do with Interpolation.
          2.3.1 - {{ 2+ 2}} - It will show the result as 4. ( Can do mathematical calculations )
          2.3.2 - {{ "welcome" + title }} - Concatination the string with poperty can be done.
          2.3.3 - {{ name.length() }} or {{ name.toUpperCase }} - javascript methods can be runder           using Interpolation.
          2.3.4 - {{ getdata() }} - Can be used to access methods which is written in Component.ts
    2.4 - Things we can not do with Interpolation.
          2.4.1 - we cannot use window.location.href, alert , window screen methods using interpolation.

3 - Property Binding In Angular.
    
    3.1 - Attributes and property are not same. property are defined by component which can be dynamic.
    3.2 - Attributes value will remain same once the html is loaded.
    3.3 - Example how property binding is done. [id] ="myid" in html and defined myid = "test_id" in export class in Component.
    3.4 - Instead of property binding we can do interpolation too. But in interpolation there is limitation that it works with only string value.
    So, We need property binding where boolean is there.
    3.5 - Instead of [id] we can also use bind-id = "id".

4- Binding classes in angular.
    
    4.1 - [Class] = "Successclass" (Syntex)
    4.2 - If both class binding and Attribute class is given in html. It will take only class binding and attribute will act as dummy. so we should use only one not both in one tag.
    4.3 - If you want to toggle the class
          [Class.text-danger] = "haserror"
          when you set public hasserror = true. Then only that class will be aplicable.
    4.4 - If we have you multiple classes to use at differen time. We should use ngclass directive.
          [ ngClass] = "messageclass".
          We can define messageclass object in component
          Define the property to true, So in object messageclass it will check which properties are set to true and it will applied to tag.
          public this.special = true;
          public hasserror    = false; 
          public messageclass = {
              "text-success" : !this.hasserror,
              "text-danger"  : this.haserror,
              "text-sent"    : this.special
          }      
    
5-  Style Binding in angular

    5.1 - Style binding is similar to class binding.
    5.2 - [style.color] = "'orange'"
    5.3 - [style.color] = "hasserror ? 'red' : 'green'">
    5.4 - [style.color] = "propertydefined in component";
    5.5 - [ngstyle]     = "attributes";

        public attributes = {
                fontStyle: italic;
                color: red;
        }

6 - Event Binding In angular
    6.1 - Above Points are used to runder from component to template. Event binding is used when we bind data from template to component.
    Syntex - <button (click) = "onClick()">Submit</button>
             
    6.2 $event will give all the inforamation of event
    <button (click) = "onClick($event)">Submit</button>

7 - Template Referenve variable in angular
    7.1 - when there is user interaction User will want to send some data to flow from the html to class to perform an operation.
    For Example we may require value input to perform some validation. To easily access dom element, values or their properties angular provides us with template reference variable.
    7.2 - If want the value from an input 
    <input #myInput type="text">
    <button (click)="logMessage(myInput.value)">togetinput</button>

8 - Two way binding in angular
    8.1 - When ever we want the value in UI should changes JIT (just in time). At Same time data should flow from template to modal and from modal to template. Angular ease the way by using ngmodule directives.

    8.2 - How to use ? 
    Step 1 - Import form module in module.js file and declare in ng module array.
    step 2 - <input [(ngmodule)] = "name" type="text">
                       {{ name }}

     Two Way binding done

**************** Structural Directives in Angular ****************

9 - Directive -  *ngIf
    This is use to hide and show the dom html structure in template. ngIF directive is different from "display: none" property in angular because if we use ngIf directive to hide the dom structure it will remain in html which we can see using inspect, but it wont show at view time.
    Syntex - 
        9.1 - <h2 *ngIf="false">heading 1</h2>
        9.2 - how to implement else block
              <h2 *ngIf="trueifsattisfy ; else notsattisfy " >True condition</h2>
              we need to put the false element inside

              <ng-template #notsattisfy>
                <h2>False condition</h2>
              </ng-template>
        9.3 - <div *ngIf = "displaynone ; then thenBlock ; else elseBlock"></div>
              
              <ng-template #thenBlock>
                    <h2>thenBock</h2>
              </ng-template>

              <ng-template #elseBlock>
                    <h2>elseblock</h2>
              </ng-template>
10 - Directive - *ngSwitch
    This is use when multiple cases are there to play around in html dom structure.
        10.1 - Syntex 
                <div [ngSwitch]="color">
                    <div *ngSwitchCase="'red'">You picked red color</div>
                    <div *ngSwitchCase="'yellow'">You picked yellow color</div>
                    <div *ngSwitchCase="'green'">You picked green color</div>
                    <div *ngSwitchDefault>You picked no color</div>
                </div>        

                In component
                public color = yellow;

11 - Directive - *ngFor
        11.1 - Syntex
                In coponent we can define array in our component.ts file
                public colors = ['red','green','yellow','blue','grey'];

                Use of ngfor in html file
                <div *ngFor = "let color of colors">
                    <h2>{{ color }}</h2>
                </div>

                11.1.2 - Binding index value to structure
                <div *ngFor = "let color of colors; index as i">
                    <h2>{{ i }}{{ color }}</h2>
                </div>

                11.1.3 - Binding to even tags
                <div *ngFor = "let color of colors; even as e">
                    <h2>{{ e }}{{ color }}</h2>
                </div>
                
                11.1.4 - Binding to odd tags
                <div *ngFor = "let color of colors; odd as o">
                    <h2>{{ o }}{{ color }}</h2>
                </div>

                11.1.5 - Binding to first tags
                <div *ngFor = "let color of colors; first as f">
                    <h2>{{ f }}{{ color }}</h2>
                </div>

                11.1.6 - Binding to last tags
                <div *ngFor = "let color of colors; last as l">
                    <h2>{{ l }}{{ color }}</h2>
                </div>

                
*************   Component Interaction   *************

Meaning How data flow from the parent component to child component. 

12 - Component interaction - 
            12.1 - They will be interacting with each other using @input() and @output() decorator.
                 - @output() - Means - sends data.
                 - @input()  - Means - receive data.

            12.2 - From parent to child component 
                 - Define this property in parent component
                   Define public name = 'your name';
                   
                   12.2.1 - Bind the property in selector of child component
                   12.2.2 - Syntex - <app-childcomponent [parentdata] = "name"></app-childcomponent>
                   12.2.3 - In Child component you need to import for using inside child component.
                            Import  is done by using "Input" keyword. To take in the property which has been sent by parent component.
                   12.2.4 - We need to tell the component that this property is a input property for this component.
                          - so for that we will use @input decorator before defining this property in child            component.
                          - Syntex - @input() public parentdata;
                          - and using interpolation we can access in html {{ parentdata }}
                          - If we want to define this property with some other name.
                          - Syntex - @input('parentdata') public justanothername;
                          - and using interpolation we can access in html {{ jsutanothername}}.


                     12.3  - From child component to parent component.
                    12.3.1 - We can not send data the same way like we were sending from parent to child beacuase in
                            child component we wont having the parent selector, so we wont be able to bind like parent to child. 
                    12.3.2 - So, we will be using events to send the data from child to parent component.
                    12.3.3 - Syntex or example 
                             12.3.3.1 - import EventEmitter and output
                             12.3.3.2 - @output() public childEvent =  new EventEmitter();
                             12.3.3.3 - how to use the events to send the data
                                        <button (click) = "fireEvent()"></button>

                                        fireEvent(){
                                            this.EventEmitter.emit('hey this is sending from child component');
                                        }

                             12.3.3.4 - Defining in the selector of child component - same like Event "fireEvent" was to bind child template to child component. 
                             Now binding the child event using selector.

                             <app-childcomponent (childEvent) ="message = $event"></app-childcomponent>

                              12.3.3.5 - In Parent component
                                         public message = "";